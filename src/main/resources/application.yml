spring:
  application:
    name: tinlettermanager

  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVERS}

    producer:
      acks: all
      compression-type: snappy
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      retries: 3
      properties:
        max.in.flight.requests.per.connection: 1
        retry.backoff.ms: 5000
        enable.idempotence: false
        schema.registry.url: ${SCHEMA_SERVERS}
    consumer:
      group-id: tin-certification-consumer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: ${SCHEMA_SERVERS}
        specific.avro.reader: true
    properties:
      schema:
        registry:
          url: ${SCHEMA_SERVERS}
      #basic:
      #  auth:
      #    user:
      #      info: ${SCHEMA_AUTHS}
      #    credentials:
      #      source: USER_INFO
      #ssl:
      #  endpoint:
      #    identification:
      #      algorithm: https
      #sasl:
      #  mechanism: PLAIN
      #  jaas:
      #    config: ${JAAS_CONFIGS}
      #security:
      #  protocol: SASL_SSL
      #jaas:
      #  enabled: false

kafka:
  topic: tax-operations-tin-certification-status

server:
  servlet:
    context-path: /tinlettermanager
  ssl:
    key-store: /opt/keystores/keystore.jks
    key-store-password: ${KEYSTORE_PASSWORD}
    key-store-type: PKCS12
    enabled: false
  port: 8443

management:
  server:
    port: 8081
    ssl:
      enabled: false
  endpoints:
    web:
      base-path: /mgmt/actuator
      exposure:
        include:
          - health
          - info
          - prometheus
  endpoint:
    health:
      show-details: always
